{
  "address": "0x4a26f1f5CF00C07b02b1b828Aa8D0511121e963E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_erc20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mainBackend",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Dispense",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "target",
          "type": "string"
        }
      ],
      "name": "Upload",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_backend",
          "type": "address[]"
        }
      ],
      "name": "addBackend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "changeFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "checkUserLock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "targetAddr",
              "type": "string"
            }
          ],
          "internalType": "struct BridgeAssist.Lock",
          "name": "userLock",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "clearLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "dispense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isBackend",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainBackend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_backend",
          "type": "address[]"
        }
      ],
      "name": "removeBackend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_target",
          "type": "string"
        }
      ],
      "name": "upload",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd318b9377dafdfc9ab6730dc1ee5ffde59b6cdcedc7dc2acdcd45b8647243187",
  "receipt": {
    "to": null,
    "from": "0x6EF1032E74B0371BAa3cA64878d8984eFd1B7453",
    "contractAddress": "0x4a26f1f5CF00C07b02b1b828Aa8D0511121e963E",
    "transactionIndex": 5,
    "gasUsed": "1488934",
    "logsBloom": "0x
    "blockHash": "0xb81ecef62df6d4a90d5fdd16cee9d5a9fb4a188be5910509f22194fb6c1a72cb",
    "transactionHash": "0xd318b9377dafdfc9ab6730dc1ee5ffde59b6cdcedc7dc2acdcd45b8647243187",
    "logs": [],
    "blockNumber": 19619503,
    "cumulativeGasUsed": "2316716",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x21D301B4A86d5063e704aED7e8Fe6b4012a792Ad",
    "0x6EF1032E74B0371BAa3cA64878d8984eFd1B7453",
    "0x6EF1032E74B0371BAa3cA64878d8984eFd1B7453"
  ],
  "numDeployments": 3,
  "solcInputHash": "44e09f172aec829b05a3c95babc2761a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainBackend\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Dispense\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"target\",\"type\":\"string\"}],\"name\":\"Upload\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_backend\",\"type\":\"address[]\"}],\"name\":\"addBackend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"changeFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkUserLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"targetAddr\",\"type\":\"string\"}],\"internalType\":\"struct BridgeAssist.Lock\",\"name\":\"userLock\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"clearLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"dispense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBackend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainBackend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_backend\",\"type\":\"address[]\"}],\"name\":\"removeBackend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_target\",\"type\":\"string\"}],\"name\":\"upload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBackend(address[])\":{\"params\":{\"_backend\":\"Backend ETH/BSC wallet addresses\"}},\"changeFeeAddress(address)\":{\"params\":{\"_feeAddress\":\"ETH/BSC fee wallet address\"}},\"checkUserLock(address)\":{\"details\":\"This function is used for the verfication of uploading tokens\",\"params\":{\"_account\":\"BSC wallet address\"},\"returns\":{\"userLock\":\"Lock structure for the user\"}},\"clearLock(address)\":{\"params\":{\"_account\":\"ETH/BSC wallet address\"}},\"constructor\":{\"params\":{\"_erc20\":\"ERC-20/BEP-20 token\",\"_feeAddress\":\"ETH/BSC fee wallet address\",\"_mainBackend\":\"Main backend ETH/BSC wallet address\"}},\"dispense(address,uint256,uint256)\":{\"params\":{\"_account\":\"ETH/BSC wallet address\",\"_amount\":\"Number of tokens to dispense\",\"_fee\":\"Fee amount\"}},\"removeBackend(address[])\":{\"params\":{\"_backend\":\"Backend ETH/BSC wallet addresses\"}},\"upload(uint256,string)\":{\"details\":\"Creating lock structure and transferring the number of tokens to the bridge address\",\"params\":{\"_amount\":\"Number of tokens to swap\",\"_target\":\"Solana wallet address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBackend(address[])\":{\"notice\":\"Adding new backend addresses\"},\"changeFeeAddress(address)\":{\"notice\":\"Changing fee address\"},\"checkUserLock(address)\":{\"notice\":\"Viewing the lock structure for the user\"},\"clearLock(address)\":{\"notice\":\"Backend function to clear user lock in the swap token process\"},\"dispense(address,uint256,uint256)\":{\"notice\":\"Dispensing tokens from the bridge by the backend to swap in the direction of Solana->ETH/BSC\"},\"removeBackend(address[])\":{\"notice\":\"Removing backend addresses\"},\"upload(uint256,string)\":{\"notice\":\"Locking tokens on the bridge to swap in the direction of ETH/BSC->Solana\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeAssist.sol\":\"BridgeAssist\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/BridgeAssist.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract BridgeAssist {\\n    IERC20 public erc20;\\n\\n    struct Lock {\\n        uint256 amount;\\n        string targetAddr;\\n    }\\n\\n    address public mainBackend;\\n    address public feeAddress;\\n    mapping(address => bool) public isBackend;\\n\\n    mapping(address => Lock) locks;\\n\\n    event Upload(address indexed account, uint256 indexed amount, string indexed target);\\n    event Dispense(address indexed account, uint256 indexed amount, uint256 indexed fee);\\n\\n    modifier onlyBackend() {\\n        require(\\n            isBackend[msg.sender],\\n            \\\"This function is restricted to backend\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMainBackend() {\\n        require(\\n            msg.sender == mainBackend,\\n            \\\"This function is restricted to the main backend\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @param _erc20 ERC-20/BEP-20 token\\n     * @param _feeAddress ETH/BSC fee wallet address\\n     * @param _mainBackend Main backend ETH/BSC wallet address\\n     */\\n    constructor(IERC20 _erc20, address _feeAddress, address _mainBackend) {\\n        erc20 = _erc20;\\n        feeAddress = _feeAddress;\\n        mainBackend = _mainBackend;\\n        isBackend[_mainBackend] = true;\\n    }\\n\\n    /**\\n     * @notice Locking tokens on the bridge to swap in the direction of ETH/BSC->Solana\\n     * @dev Creating lock structure and transferring the number of tokens to the bridge address\\n     * @param _amount Number of tokens to swap\\n     * @param _target Solana wallet address\\n     */\\n    function upload(uint256 _amount, string memory _target) external {\\n        require(_amount > 0, \\\"Amount should be more than 0\\\");\\n        require(\\n            locks[msg.sender].amount == 0,\\n            \\\"Your current lock is not equal to 0\\\"\\n        );\\n\\n        erc20.transferFrom(msg.sender, address(this), _amount);\\n        locks[msg.sender].amount = _amount;\\n        locks[msg.sender].targetAddr = _target;\\n        emit Upload(msg.sender, _amount, _target);\\n    }\\n\\n    /**\\n     * @notice Dispensing tokens from the bridge by the backend to swap in the direction of Solana->ETH/BSC\\n     * @param _account ETH/BSC wallet address\\n     * @param _amount Number of tokens to dispense\\n     * @param _fee Fee amount\\n     */\\n    function dispense(address _account, uint256 _amount, uint256 _fee) external onlyBackend {\\n        erc20.transfer(_account, _amount);\\n        erc20.transfer(feeAddress, _fee);\\n        emit Dispense(_account, _amount, _fee);\\n    }\\n\\n    /**\\n     * @notice Backend function to clear user lock in the swap token process\\n     * @param _account ETH/BSC wallet address\\n     */\\n    function clearLock(address _account) external onlyBackend {\\n        locks[_account].amount = 0;\\n        locks[_account].targetAddr = \\\"\\\";\\n    }\\n\\n    /**\\n     * @notice Adding new backend addresses\\n     * @param _backend Backend ETH/BSC wallet addresses\\n     */\\n    function addBackend(address[] calldata _backend) external onlyMainBackend {\\n        require(_backend.length <= 100, \\\"Array size should be less than or equal to 100\\\");\\n        for (uint256 i = 0; i < _backend.length; i++) {\\n            isBackend[_backend[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Removing backend addresses\\n     * @param _backend Backend ETH/BSC wallet addresses\\n     */\\n    function removeBackend(address[] calldata _backend) external onlyMainBackend {\\n        require(_backend.length <= 100, \\\"Array size should be less than or equal to 100\\\");\\n        for (uint256 i = 0; i < _backend.length; i++) {\\n            isBackend[_backend[i]] = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Changing fee address\\n     * @param _feeAddress ETH/BSC fee wallet address\\n     */\\n    function changeFeeAddress(address _feeAddress) external onlyMainBackend {\\n        feeAddress = _feeAddress;\\n    }\\n\\n    /**\\n     * @notice Viewing the lock structure for the user\\n     * @dev This function is used for the verfication of uploading tokens\\n     * @param _account BSC wallet address\\n     * @return userLock Lock structure for the user\\n     */\\n    function checkUserLock(address _account)\\n        external\\n        view\\n        returns (Lock memory userLock)\\n    {\\n        userLock.amount = locks[_account].amount;\\n        userLock.targetAddr = locks[_account].targetAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x187fd3c085d20d03c3c7c088d38c68f2d934b69f57219db0ac6e8a5e3a164103\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001acc38038062001acc833981810160405281019062000037919062000188565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050506200025a565b6000815190506200016b8162000226565b92915050565b600081519050620001828162000240565b92915050565b6000806000606084860312156200019e57600080fd5b6000620001ae8682870162000171565b9350506020620001c1868287016200015a565b9250506040620001d4868287016200015a565b9150509250925092565b6000620001eb8262000206565b9050919050565b6000620001ff82620001de565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200023181620001de565b81146200023d57600080fd5b50565b6200024b81620001f2565b81146200025757600080fd5b50565b611862806200026a6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063785e9e8611610071578063785e9e86146101505780638dc735211461016e578063a578c2da1461018a578063c52ee785146101ba578063e758f0d5146101d8578063e784f2b4146101f4576100a9565b80630e0111e5146100ae578063285e1406146100ca57806341275358146100e65780634c7f0bdd146101045780634d725e9514610134575b600080fd5b6100c860048036038101906100c3919061100f565b610210565b005b6100e460048036038101906100df9190610f97565b6103b2565b005b6100ee610486565b6040516100fb9190611289565b60405180910390f35b61011e60048036038101906101199190610f97565b6104ac565b60405161012b9190611304565b60405180910390f35b61014e6004803603810190610149919061107d565b6104cc565b005b610158610740565b604051610165919061131f565b60405180910390f35b61018860048036038101906101839190610f97565b610764565b005b6101a4600480360381019061019f9190610f97565b6108a1565b6040516101b191906113da565b60405180910390f35b6101c26109cd565b6040516101cf9190611289565b60405180910390f35b6101f260048036038101906101ed919061100f565b6109f3565b005b61020e60048036038101906102099190610fc0565b610b95565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102979061133a565b60405180910390fd5b60648282905011156102e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102de9061137a565b60405180910390fd5b60005b828290508110156103ad57600060036000858585818110610334577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906103499190610f97565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806103a59061159b565b9150506102ea565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610442576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104399061133a565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b6000821161050f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610506906113ba565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058b9061139a565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016105f1939291906112a4565b602060405180830381600087803b15801561060b57600080fd5b505af115801561061f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106439190611054565b5081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190805190602001906106e1929190610de9565b50806040516106f09190611272565b6040518091039020823373ffffffffffffffffffffffffffffffffffffffff167f60fba7085f9c79138a601dd1af00e09e61ed6d762e7536ab41ac195be82e5f7e60405160405180910390a45050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e79061135a565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060405180602001604052806000815250600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061089d929190610de9565b5050565b6108a9610e6f565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154816000018181525050600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805461094290611538565b80601f016020809104026020016040519081016040528092919081815260200182805461096e90611538565b80156109bb5780601f10610990576101008083540402835291602001916109bb565b820191906000526020600020905b81548152906001019060200180831161099e57829003601f168201915b50505050508160200181905250919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7a9061133a565b60405180910390fd5b6064828290501115610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac19061137a565b60405180910390fd5b60005b82829050811015610b9057600160036000858585818110610b17577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610b2c9190610f97565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610b889061159b565b915050610acd565b505050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c189061135a565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401610c7c9291906112db565b602060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce9190611054565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610d4c9291906112db565b602060405180830381600087803b158015610d6657600080fd5b505af1158015610d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9e9190611054565b5080828473ffffffffffffffffffffffffffffffffffffffff167f55099c65b144b9c49b9540c62984f0a55edc757fda3032431f3c8bba6a44efc460405160405180910390a4505050565b828054610df590611538565b90600052602060002090601f016020900481019282610e175760008555610e5e565b82601f10610e3057805160ff1916838001178555610e5e565b82800160010185558215610e5e579182015b82811115610e5d578251825591602001919060010190610e42565b5b509050610e6b9190610e89565b5090565b604051806040016040528060008152602001606081525090565b5b80821115610ea2576000816000905550600101610e8a565b5090565b6000610eb9610eb484611421565b6113fc565b905082815260208101848484011115610ed157600080fd5b610edc8482856114f6565b509392505050565b600081359050610ef3816117e7565b92915050565b60008083601f840112610f0b57600080fd5b8235905067ffffffffffffffff811115610f2457600080fd5b602083019150836020820283011115610f3c57600080fd5b9250929050565b600081519050610f52816117fe565b92915050565b600082601f830112610f6957600080fd5b8135610f79848260208601610ea6565b91505092915050565b600081359050610f9181611815565b92915050565b600060208284031215610fa957600080fd5b6000610fb784828501610ee4565b91505092915050565b600080600060608486031215610fd557600080fd5b6000610fe386828701610ee4565b9350506020610ff486828701610f82565b925050604061100586828701610f82565b9150509250925092565b6000806020838503121561102257600080fd5b600083013567ffffffffffffffff81111561103c57600080fd5b61104885828601610ef9565b92509250509250929050565b60006020828403121561106657600080fd5b600061107484828501610f43565b91505092915050565b6000806040838503121561109057600080fd5b600061109e85828601610f82565b925050602083013567ffffffffffffffff8111156110bb57600080fd5b6110c785828601610f58565b9150509250929050565b6110da8161148a565b82525050565b6110e98161149c565b82525050565b6110f8816114d2565b82525050565b600061110982611452565b611113818561145d565b9350611123818560208601611505565b61112c81611671565b840191505092915050565b600061114282611452565b61114c818561147f565b935061115c818560208601611505565b80840191505092915050565b6000611175602f8361146e565b915061118082611682565b604082019050919050565b600061119860268361146e565b91506111a3826116d1565b604082019050919050565b60006111bb602e8361146e565b91506111c682611720565b604082019050919050565b60006111de60238361146e565b91506111e98261176f565b604082019050919050565b6000611201601c8361146e565b915061120c826117be565b602082019050919050565b600060408301600083015161122f6000860182611254565b506020830151848203602086015261124782826110fe565b9150508091505092915050565b61125d816114c8565b82525050565b61126c816114c8565b82525050565b600061127e8284611137565b915081905092915050565b600060208201905061129e60008301846110d1565b92915050565b60006060820190506112b960008301866110d1565b6112c660208301856110d1565b6112d36040830184611263565b949350505050565b60006040820190506112f060008301856110d1565b6112fd6020830184611263565b9392505050565b600060208201905061131960008301846110e0565b92915050565b600060208201905061133460008301846110ef565b92915050565b6000602082019050818103600083015261135381611168565b9050919050565b600060208201905081810360008301526113738161118b565b9050919050565b60006020820190508181036000830152611393816111ae565b9050919050565b600060208201905081810360008301526113b3816111d1565b9050919050565b600060208201905081810360008301526113d3816111f4565b9050919050565b600060208201905081810360008301526113f48184611217565b905092915050565b6000611406611417565b9050611412828261156a565b919050565b6000604051905090565b600067ffffffffffffffff82111561143c5761143b611642565b5b61144582611671565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611495826114a8565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006114dd826114e4565b9050919050565b60006114ef826114a8565b9050919050565b82818337600083830152505050565b60005b83811015611523578082015181840152602081019050611508565b83811115611532576000848401525b50505050565b6000600282049050600182168061155057607f821691505b6020821081141561156457611563611613565b5b50919050565b61157382611671565b810181811067ffffffffffffffff8211171561159257611591611642565b5b80604052505050565b60006115a6826114c8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156115d9576115d86115e4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f546869732066756e6374696f6e206973207265737472696374656420746f207460008201527f6865206d61696e206261636b656e640000000000000000000000000000000000602082015250565b7f546869732066756e6374696f6e206973207265737472696374656420746f206260008201527f61636b656e640000000000000000000000000000000000000000000000000000602082015250565b7f41727261792073697a652073686f756c64206265206c657373207468616e206f60008201527f7220657175616c20746f20313030000000000000000000000000000000000000602082015250565b7f596f75722063757272656e74206c6f636b206973206e6f7420657175616c207460008201527f6f20300000000000000000000000000000000000000000000000000000000000602082015250565b7f416d6f756e742073686f756c64206265206d6f7265207468616e203000000000600082015250565b6117f08161148a565b81146117fb57600080fd5b50565b6118078161149c565b811461181257600080fd5b50565b61181e816114c8565b811461182957600080fd5b5056fea26469706673582212202a0395a02c9e93a14d50853fd560743dd6455551090afbad7150c8a9742b7a5664736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063785e9e8611610071578063785e9e86146101505780638dc735211461016e578063a578c2da1461018a578063c52ee785146101ba578063e758f0d5146101d8578063e784f2b4146101f4576100a9565b80630e0111e5146100ae578063285e1406146100ca57806341275358146100e65780634c7f0bdd146101045780634d725e9514610134575b600080fd5b6100c860048036038101906100c3919061100f565b610210565b005b6100e460048036038101906100df9190610f97565b6103b2565b005b6100ee610486565b6040516100fb9190611289565b60405180910390f35b61011e60048036038101906101199190610f97565b6104ac565b60405161012b9190611304565b60405180910390f35b61014e6004803603810190610149919061107d565b6104cc565b005b610158610740565b604051610165919061131f565b60405180910390f35b61018860048036038101906101839190610f97565b610764565b005b6101a4600480360381019061019f9190610f97565b6108a1565b6040516101b191906113da565b60405180910390f35b6101c26109cd565b6040516101cf9190611289565b60405180910390f35b6101f260048036038101906101ed919061100f565b6109f3565b005b61020e60048036038101906102099190610fc0565b610b95565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102979061133a565b60405180910390fd5b60648282905011156102e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102de9061137a565b60405180910390fd5b60005b828290508110156103ad57600060036000858585818110610334577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906103499190610f97565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806103a59061159b565b9150506102ea565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610442576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104399061133a565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b6000821161050f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610506906113ba565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058b9061139a565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016105f1939291906112a4565b602060405180830381600087803b15801561060b57600080fd5b505af115801561061f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106439190611054565b5081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190805190602001906106e1929190610de9565b50806040516106f09190611272565b6040518091039020823373ffffffffffffffffffffffffffffffffffffffff167f60fba7085f9c79138a601dd1af00e09e61ed6d762e7536ab41ac195be82e5f7e60405160405180910390a45050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e79061135a565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060405180602001604052806000815250600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061089d929190610de9565b5050565b6108a9610e6f565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154816000018181525050600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805461094290611538565b80601f016020809104026020016040519081016040528092919081815260200182805461096e90611538565b80156109bb5780601f10610990576101008083540402835291602001916109bb565b820191906000526020600020905b81548152906001019060200180831161099e57829003601f168201915b50505050508160200181905250919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7a9061133a565b60405180910390fd5b6064828290501115610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac19061137a565b60405180910390fd5b60005b82829050811015610b9057600160036000858585818110610b17577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610b2c9190610f97565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610b889061159b565b915050610acd565b505050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c189061135a565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401610c7c9291906112db565b602060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce9190611054565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610d4c9291906112db565b602060405180830381600087803b158015610d6657600080fd5b505af1158015610d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9e9190611054565b5080828473ffffffffffffffffffffffffffffffffffffffff167f55099c65b144b9c49b9540c62984f0a55edc757fda3032431f3c8bba6a44efc460405160405180910390a4505050565b828054610df590611538565b90600052602060002090601f016020900481019282610e175760008555610e5e565b82601f10610e3057805160ff1916838001178555610e5e565b82800160010185558215610e5e579182015b82811115610e5d578251825591602001919060010190610e42565b5b509050610e6b9190610e89565b5090565b604051806040016040528060008152602001606081525090565b5b80821115610ea2576000816000905550600101610e8a565b5090565b6000610eb9610eb484611421565b6113fc565b905082815260208101848484011115610ed157600080fd5b610edc8482856114f6565b509392505050565b600081359050610ef3816117e7565b92915050565b60008083601f840112610f0b57600080fd5b8235905067ffffffffffffffff811115610f2457600080fd5b602083019150836020820283011115610f3c57600080fd5b9250929050565b600081519050610f52816117fe565b92915050565b600082601f830112610f6957600080fd5b8135610f79848260208601610ea6565b91505092915050565b600081359050610f9181611815565b92915050565b600060208284031215610fa957600080fd5b6000610fb784828501610ee4565b91505092915050565b600080600060608486031215610fd557600080fd5b6000610fe386828701610ee4565b9350506020610ff486828701610f82565b925050604061100586828701610f82565b9150509250925092565b6000806020838503121561102257600080fd5b600083013567ffffffffffffffff81111561103c57600080fd5b61104885828601610ef9565b92509250509250929050565b60006020828403121561106657600080fd5b600061107484828501610f43565b91505092915050565b6000806040838503121561109057600080fd5b600061109e85828601610f82565b925050602083013567ffffffffffffffff8111156110bb57600080fd5b6110c785828601610f58565b9150509250929050565b6110da8161148a565b82525050565b6110e98161149c565b82525050565b6110f8816114d2565b82525050565b600061110982611452565b611113818561145d565b9350611123818560208601611505565b61112c81611671565b840191505092915050565b600061114282611452565b61114c818561147f565b935061115c818560208601611505565b80840191505092915050565b6000611175602f8361146e565b915061118082611682565b604082019050919050565b600061119860268361146e565b91506111a3826116d1565b604082019050919050565b60006111bb602e8361146e565b91506111c682611720565b604082019050919050565b60006111de60238361146e565b91506111e98261176f565b604082019050919050565b6000611201601c8361146e565b915061120c826117be565b602082019050919050565b600060408301600083015161122f6000860182611254565b506020830151848203602086015261124782826110fe565b9150508091505092915050565b61125d816114c8565b82525050565b61126c816114c8565b82525050565b600061127e8284611137565b915081905092915050565b600060208201905061129e60008301846110d1565b92915050565b60006060820190506112b960008301866110d1565b6112c660208301856110d1565b6112d36040830184611263565b949350505050565b60006040820190506112f060008301856110d1565b6112fd6020830184611263565b9392505050565b600060208201905061131960008301846110e0565b92915050565b600060208201905061133460008301846110ef565b92915050565b6000602082019050818103600083015261135381611168565b9050919050565b600060208201905081810360008301526113738161118b565b9050919050565b60006020820190508181036000830152611393816111ae565b9050919050565b600060208201905081810360008301526113b3816111d1565b9050919050565b600060208201905081810360008301526113d3816111f4565b9050919050565b600060208201905081810360008301526113f48184611217565b905092915050565b6000611406611417565b9050611412828261156a565b919050565b6000604051905090565b600067ffffffffffffffff82111561143c5761143b611642565b5b61144582611671565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611495826114a8565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006114dd826114e4565b9050919050565b60006114ef826114a8565b9050919050565b82818337600083830152505050565b60005b83811015611523578082015181840152602081019050611508565b83811115611532576000848401525b50505050565b6000600282049050600182168061155057607f821691505b6020821081141561156457611563611613565b5b50919050565b61157382611671565b810181811067ffffffffffffffff8211171561159257611591611642565b5b80604052505050565b60006115a6826114c8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156115d9576115d86115e4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f546869732066756e6374696f6e206973207265737472696374656420746f207460008201527f6865206d61696e206261636b656e640000000000000000000000000000000000602082015250565b7f546869732066756e6374696f6e206973207265737472696374656420746f206260008201527f61636b656e640000000000000000000000000000000000000000000000000000602082015250565b7f41727261792073697a652073686f756c64206265206c657373207468616e206f60008201527f7220657175616c20746f20313030000000000000000000000000000000000000602082015250565b7f596f75722063757272656e74206c6f636b206973206e6f7420657175616c207460008201527f6f20300000000000000000000000000000000000000000000000000000000000602082015250565b7f416d6f756e742073686f756c64206265206d6f7265207468616e203000000000600082015250565b6117f08161148a565b81146117fb57600080fd5b50565b6118078161149c565b811461181257600080fd5b50565b61181e816114c8565b811461182957600080fd5b5056fea26469706673582212202a0395a02c9e93a14d50853fd560743dd6455551090afbad7150c8a9742b7a5664736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBackend(address[])": {
        "params": {
          "_backend": "Backend ETH/BSC wallet addresses"
        }
      },
      "changeFeeAddress(address)": {
        "params": {
          "_feeAddress": "ETH/BSC fee wallet address"
        }
      },
      "checkUserLock(address)": {
        "details": "This function is used for the verfication of uploading tokens",
        "params": {
          "_account": "BSC wallet address"
        },
        "returns": {
          "userLock": "Lock structure for the user"
        }
      },
      "clearLock(address)": {
        "params": {
          "_account": "ETH/BSC wallet address"
        }
      },
      "constructor": {
        "params": {
          "_erc20": "ERC-20/BEP-20 token",
          "_feeAddress": "ETH/BSC fee wallet address",
          "_mainBackend": "Main backend ETH/BSC wallet address"
        }
      },
      "dispense(address,uint256,uint256)": {
        "params": {
          "_account": "ETH/BSC wallet address",
          "_amount": "Number of tokens to dispense",
          "_fee": "Fee amount"
        }
      },
      "removeBackend(address[])": {
        "params": {
          "_backend": "Backend ETH/BSC wallet addresses"
        }
      },
      "upload(uint256,string)": {
        "details": "Creating lock structure and transferring the number of tokens to the bridge address",
        "params": {
          "_amount": "Number of tokens to swap",
          "_target": "Solana wallet address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBackend(address[])": {
        "notice": "Adding new backend addresses"
      },
      "changeFeeAddress(address)": {
        "notice": "Changing fee address"
      },
      "checkUserLock(address)": {
        "notice": "Viewing the lock structure for the user"
      },
      "clearLock(address)": {
        "notice": "Backend function to clear user lock in the swap token process"
      },
      "dispense(address,uint256,uint256)": {
        "notice": "Dispensing tokens from the bridge by the backend to swap in the direction of Solana->ETH/BSC"
      },
      "removeBackend(address[])": {
        "notice": "Removing backend addresses"
      },
      "upload(uint256,string)": {
        "notice": "Locking tokens on the bridge to swap in the direction of ETH/BSC->Solana"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 821,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "erc20",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)768"
      },
      {
        "astId": 828,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "mainBackend",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 830,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "feeAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 834,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "isBackend",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 839,
        "contract": "contracts/BridgeAssist.sol:BridgeAssist",
        "label": "locks",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Lock)826_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)768": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Lock)826_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BridgeAssist.Lock)",
        "numberOfBytes": "32",
        "value": "t_struct(Lock)826_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Lock)826_storage": {
        "encoding": "inplace",
        "label": "struct BridgeAssist.Lock",
        "members": [
          {
            "astId": 823,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 825,
            "contract": "contracts/BridgeAssist.sol:BridgeAssist",
            "label": "targetAddr",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
