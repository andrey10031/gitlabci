/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export declare namespace BridgeAssist {
  export type LockStruct = { amount: BigNumberish; targetAddr: string }

  export type LockStructOutput = [BigNumber, string] & {
    amount: BigNumber
    targetAddr: string
  }
}

export interface BridgeAssistInterface extends utils.Interface {
  contractName: 'BridgeAssist'
  functions: {
    'addBackend(address[])': FunctionFragment
    'changeFeeAddress(address)': FunctionFragment
    'checkUserLock(address)': FunctionFragment
    'clearLock(address)': FunctionFragment
    'dispense(address,uint256,uint256)': FunctionFragment
    'erc20()': FunctionFragment
    'feeAddress()': FunctionFragment
    'isBackend(address)': FunctionFragment
    'upload(uint256,string)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'addBackend', values: [string[]]): string
  encodeFunctionData(functionFragment: 'changeFeeAddress', values: [string]): string
  encodeFunctionData(functionFragment: 'checkUserLock', values: [string]): string
  encodeFunctionData(functionFragment: 'clearLock', values: [string]): string
  encodeFunctionData(functionFragment: 'dispense', values: [string, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'erc20', values?: undefined): string
  encodeFunctionData(functionFragment: 'feeAddress', values?: undefined): string
  encodeFunctionData(functionFragment: 'isBackend', values: [string]): string
  encodeFunctionData(functionFragment: 'upload', values: [BigNumberish, string]): string

  decodeFunctionResult(functionFragment: 'addBackend', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changeFeeAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkUserLock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'clearLock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'dispense', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'erc20', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'feeAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isBackend', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upload', data: BytesLike): Result

  events: {
    'Dispense(address,uint256,uint256)': EventFragment
    'Upload(address,uint256,string)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Dispense'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Upload'): EventFragment
}

export type DispenseEvent = TypedEvent<[string, BigNumber, BigNumber], { account: string; amount: BigNumber; fee: BigNumber }>

export type DispenseEventFilter = TypedEventFilter<DispenseEvent>

export type UploadEvent = TypedEvent<[string, BigNumber, string], { account: string; amount: BigNumber; target: string }>

export type UploadEventFilter = TypedEventFilter<UploadEvent>

export interface BridgeAssist extends BaseContract {
  contractName: 'BridgeAssist'
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: BridgeAssistInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addBackend(_backend: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    changeFeeAddress(_feeAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    checkUserLock(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BridgeAssist.LockStructOutput] & {
        userLock: BridgeAssist.LockStructOutput
      }
    >

    clearLock(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    dispense(
      _account: string,
      _amount: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    erc20(overrides?: CallOverrides): Promise<[string]>

    feeAddress(overrides?: CallOverrides): Promise<[string]>

    isBackend(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    upload(_amount: BigNumberish, _target: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>
  }

  addBackend(_backend: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  changeFeeAddress(_feeAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  checkUserLock(_account: string, overrides?: CallOverrides): Promise<BridgeAssist.LockStructOutput>

  clearLock(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  dispense(
    _account: string,
    _amount: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  erc20(overrides?: CallOverrides): Promise<string>

  feeAddress(overrides?: CallOverrides): Promise<string>

  isBackend(arg0: string, overrides?: CallOverrides): Promise<boolean>

  upload(_amount: BigNumberish, _target: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  callStatic: {
    addBackend(_backend: string[], overrides?: CallOverrides): Promise<void>

    changeFeeAddress(_feeAddress: string, overrides?: CallOverrides): Promise<void>

    checkUserLock(_account: string, overrides?: CallOverrides): Promise<BridgeAssist.LockStructOutput>

    clearLock(_account: string, overrides?: CallOverrides): Promise<void>

    dispense(_account: string, _amount: BigNumberish, _fee: BigNumberish, overrides?: CallOverrides): Promise<void>

    erc20(overrides?: CallOverrides): Promise<string>

    feeAddress(overrides?: CallOverrides): Promise<string>

    isBackend(arg0: string, overrides?: CallOverrides): Promise<boolean>

    upload(_amount: BigNumberish, _target: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'Dispense(address,uint256,uint256)'(account?: string | null, amount?: BigNumberish | null, fee?: BigNumberish | null): DispenseEventFilter
    Dispense(account?: string | null, amount?: BigNumberish | null, fee?: BigNumberish | null): DispenseEventFilter

    'Upload(address,uint256,string)'(account?: string | null, amount?: BigNumberish | null, target?: string | null): UploadEventFilter
    Upload(account?: string | null, amount?: BigNumberish | null, target?: string | null): UploadEventFilter
  }

  estimateGas: {
    addBackend(_backend: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    changeFeeAddress(_feeAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    checkUserLock(_account: string, overrides?: CallOverrides): Promise<BigNumber>

    clearLock(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    dispense(_account: string, _amount: BigNumberish, _fee: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    erc20(overrides?: CallOverrides): Promise<BigNumber>

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>

    isBackend(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    upload(_amount: BigNumberish, _target: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    addBackend(_backend: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    changeFeeAddress(_feeAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    checkUserLock(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    clearLock(_account: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    dispense(
      _account: string,
      _amount: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    erc20(overrides?: CallOverrides): Promise<PopulatedTransaction>

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isBackend(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    upload(_amount: BigNumberish, _target: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>
  }
}
