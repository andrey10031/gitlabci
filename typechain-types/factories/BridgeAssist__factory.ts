/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type { BridgeAssist, BridgeAssistInterface } from '../BridgeAssist'

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IERC20',
        name: '_erc20',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_feeAddress',
        type: 'address',
      },
      {
        internalType: 'address[]',
        name: '_backend',
        type: 'address[]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'fee',
        type: 'uint256',
      },
    ],
    name: 'Dispense',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'string',
        name: 'target',
        type: 'string',
      },
    ],
    name: 'Upload',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_backend',
        type: 'address[]',
      },
    ],
    name: 'addBackend',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_feeAddress',
        type: 'address',
      },
    ],
    name: 'changeFeeAddress',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address',
      },
    ],
    name: 'checkUserLock',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'string',
            name: 'targetAddr',
            type: 'string',
          },
        ],
        internalType: 'struct BridgeAssist.Lock',
        name: 'userLock',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address',
      },
    ],
    name: 'clearLock',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_fee',
        type: 'uint256',
      },
    ],
    name: 'dispense',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'erc20',
    outputs: [
      {
        internalType: 'contract IERC20',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'feeAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'isBackend',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
      {
        internalType: 'string',
        name: '_target',
        type: 'string',
      },
    ],
    name: 'upload',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162001a4d38038062001a4d833981810160405281019062000037919062000296565b6064815111156200007f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000076906200032c565b60405180910390fd5b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b8151811015620001bc576001600260008484815181106200014d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080620001b3906200043f565b91505062000103565b505050506200057f565b6000620001dd620001d78462000377565b6200034e565b90508083825260208201905082856020860282011115620001fd57600080fd5b60005b858110156200023157816200021688826200023b565b84526020840193506020830192505060018101905062000200565b5050509392505050565b6000815190506200024c816200054b565b92915050565b600082601f8301126200026457600080fd5b815162000276848260208601620001c6565b91505092915050565b600081519050620002908162000565565b92915050565b600080600060608486031215620002ac57600080fd5b6000620002bc868287016200027f565b9350506020620002cf868287016200023b565b925050604084015167ffffffffffffffff811115620002ed57600080fd5b620002fb8682870162000252565b9150509250925092565b600062000314602e83620003a6565b91506200032182620004fc565b604082019050919050565b60006020820190508181036000830152620003478162000305565b9050919050565b60006200035a6200036d565b905062000368828262000409565b919050565b6000604051905090565b600067ffffffffffffffff821115620003955762000394620004bc565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000620003c482620003df565b9050919050565b6000620003d882620003b7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200041482620004eb565b810181811067ffffffffffffffff82111715620004365762000435620004bc565b5b80604052505050565b60006200044c82620003ff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200048257620004816200048d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f41727261792073697a652073686f756c64206265206c657373207468616e206f60008201527f7220657175616c20746f20313030000000000000000000000000000000000000602082015250565b6200055681620003b7565b81146200056257600080fd5b50565b6200057081620003cb565b81146200057c57600080fd5b50565b6114be806200058f6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063785e9e8611610066578063785e9e861461011e5780638dc735211461013c578063a578c2da14610158578063e758f0d514610188578063e784f2b4146101a457610093565b8063285e14061461009857806341275358146100b45780634c7f0bdd146100d25780634d725e9514610102575b600080fd5b6100b260048036038101906100ad9190610cd8565b6101c0565b005b6100bc610290565b6040516100c99190610f5f565b60405180910390f35b6100ec60048036038101906100e79190610cd8565b6102b6565b6040516100f99190610fda565b60405180910390f35b61011c60048036038101906101179190610dbe565b6102d6565b005b6101266104f0565b6040516101339190610ff5565b60405180910390f35b61015660048036038101906101519190610cd8565b610514565b005b610172600480360381019061016d9190610cd8565b610651565b60405161017f9190611090565b60405180910390f35b6101a2600480360381019061019d9190610d50565b61077d565b005b6101be60048036038101906101b99190610d01565b61091b565b005b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024390611010565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900460ff1681565b60008211610319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090611070565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541461039e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039590611050565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016103fb93929190610f7a565b602060405180830381600087803b15801561041557600080fd5b505af1158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190610d95565b5081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190805190602001906104eb929190610b2a565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059790611010565b60405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060405180602001604052806000815250600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061064d929190610b2a565b5050565b610659610bb0565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154816000018181525050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180546106f2906111e3565b80601f016020809104026020016040519081016040528092919081815260200182805461071e906111e3565b801561076b5780601f106107405761010080835404028352916020019161076b565b820191906000526020600020905b81548152906001019060200180831161074e57829003601f168201915b50505050508160200181905250919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090611010565b60405180910390fd5b6064828290501115610850576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084790611030565b60405180910390fd5b60005b828290508110156109165760016002600085858581811061089d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108b29190610cd8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061090e90611246565b915050610853565b505050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099e90611010565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401610a02929190610fb1565b602060405180830381600087803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a549190610d95565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610ad2929190610fb1565b602060405180830381600087803b158015610aec57600080fd5b505af1158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b249190610d95565b50505050565b828054610b36906111e3565b90600052602060002090601f016020900481019282610b585760008555610b9f565b82601f10610b7157805160ff1916838001178555610b9f565b82800160010185558215610b9f579182015b82811115610b9e578251825591602001919060010190610b83565b5b509050610bac9190610bca565b5090565b604051806040016040528060008152602001606081525090565b5b80821115610be3576000816000905550600101610bcb565b5090565b6000610bfa610bf5846110d7565b6110b2565b905082815260208101848484011115610c1257600080fd5b610c1d8482856111a1565b509392505050565b600081359050610c3481611443565b92915050565b60008083601f840112610c4c57600080fd5b8235905067ffffffffffffffff811115610c6557600080fd5b602083019150836020820283011115610c7d57600080fd5b9250929050565b600081519050610c938161145a565b92915050565b600082601f830112610caa57600080fd5b8135610cba848260208601610be7565b91505092915050565b600081359050610cd281611471565b92915050565b600060208284031215610cea57600080fd5b6000610cf884828501610c25565b91505092915050565b600080600060608486031215610d1657600080fd5b6000610d2486828701610c25565b9350506020610d3586828701610cc3565b9250506040610d4686828701610cc3565b9150509250925092565b60008060208385031215610d6357600080fd5b600083013567ffffffffffffffff811115610d7d57600080fd5b610d8985828601610c3a565b92509250509250929050565b600060208284031215610da757600080fd5b6000610db584828501610c84565b91505092915050565b60008060408385031215610dd157600080fd5b6000610ddf85828601610cc3565b925050602083013567ffffffffffffffff811115610dfc57600080fd5b610e0885828601610c99565b9150509250929050565b610e1b81611135565b82525050565b610e2a81611147565b82525050565b610e398161117d565b82525050565b6000610e4a82611108565b610e548185611113565b9350610e648185602086016111b0565b610e6d8161131c565b840191505092915050565b6000610e85602683611124565b9150610e908261132d565b604082019050919050565b6000610ea8602e83611124565b9150610eb38261137c565b604082019050919050565b6000610ecb602383611124565b9150610ed6826113cb565b604082019050919050565b6000610eee601c83611124565b9150610ef98261141a565b602082019050919050565b6000604083016000830151610f1c6000860182610f41565b5060208301518482036020860152610f348282610e3f565b9150508091505092915050565b610f4a81611173565b82525050565b610f5981611173565b82525050565b6000602082019050610f746000830184610e12565b92915050565b6000606082019050610f8f6000830186610e12565b610f9c6020830185610e12565b610fa96040830184610f50565b949350505050565b6000604082019050610fc66000830185610e12565b610fd36020830184610f50565b9392505050565b6000602082019050610fef6000830184610e21565b92915050565b600060208201905061100a6000830184610e30565b92915050565b6000602082019050818103600083015261102981610e78565b9050919050565b6000602082019050818103600083015261104981610e9b565b9050919050565b6000602082019050818103600083015261106981610ebe565b9050919050565b6000602082019050818103600083015261108981610ee1565b9050919050565b600060208201905081810360008301526110aa8184610f04565b905092915050565b60006110bc6110cd565b90506110c88282611215565b919050565b6000604051905090565b600067ffffffffffffffff8211156110f2576110f16112ed565b5b6110fb8261131c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061114082611153565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006111888261118f565b9050919050565b600061119a82611153565b9050919050565b82818337600083830152505050565b60005b838110156111ce5780820151818401526020810190506111b3565b838111156111dd576000848401525b50505050565b600060028204905060018216806111fb57607f821691505b6020821081141561120f5761120e6112be565b5b50919050565b61121e8261131c565b810181811067ffffffffffffffff8211171561123d5761123c6112ed565b5b80604052505050565b600061125182611173565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112845761128361128f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f546869732066756e6374696f6e206973207265737472696374656420746f206260008201527f61636b656e640000000000000000000000000000000000000000000000000000602082015250565b7f41727261792073697a652073686f756c64206265206c657373207468616e206f60008201527f7220657175616c20746f20313030000000000000000000000000000000000000602082015250565b7f596f75722063757272656e74206c6f636b206973206e6f7420657175616c207460008201527f6f20300000000000000000000000000000000000000000000000000000000000602082015250565b7f416d6f756e742073686f756c64206265206d6f7265207468616e203000000000600082015250565b61144c81611135565b811461145757600080fd5b50565b61146381611147565b811461146e57600080fd5b50565b61147a81611173565b811461148557600080fd5b5056fea2646970667358221220ff3f6558d352fd50e4969a506317856ce98d68a1d5e08aadf3d84ce3903e880064736f6c63430008010033'

type BridgeAssistConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: BridgeAssistConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class BridgeAssist__factory extends ContractFactory {
  constructor(...args: BridgeAssistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
    this.contractName = 'BridgeAssist'
  }

  deploy(_erc20: string, _feeAddress: string, _backend: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BridgeAssist> {
    return super.deploy(_erc20, _feeAddress, _backend, overrides || {}) as Promise<BridgeAssist>
  }
  getDeployTransaction(
    _erc20: string,
    _feeAddress: string,
    _backend: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_erc20, _feeAddress, _backend, overrides || {})
  }
  attach(address: string): BridgeAssist {
    return super.attach(address) as BridgeAssist
  }
  connect(signer: Signer): BridgeAssist__factory {
    return super.connect(signer) as BridgeAssist__factory
  }
  static readonly contractName: 'BridgeAssist'
  public readonly contractName: 'BridgeAssist'
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): BridgeAssistInterface {
    return new utils.Interface(_abi) as BridgeAssistInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): BridgeAssist {
    return new Contract(address, _abi, signerOrProvider) as BridgeAssist
  }
}
